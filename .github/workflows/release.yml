# This workflow creates a signed .xpi file for Thunderbird and attaches it to a GitHub Release.
# It is triggered automatically whenever a new tag in the form of 'v*.*.*' (e.g., v1.0.0) is pushed.

name: Create Thunderbird Release

on:
  push:
    tags:
      - 'v*.*.*' # Runs on tags like v1.0.0, v1.2.3, etc.

jobs:
  build-and-sign:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository's code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Node.js, which is needed to run web-ext
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3. Install web-ext, the command-line tool for managing WebExtensions
      - name: Install web-ext
        run: npm install --global web-ext

      # 4. Create the build artifacts to be signed.
      #    Assumes manifest.json and source are in root
      - name: Build add-on source
        run: web-ext build --source-dir=. --artifacts-dir=build-artifacts

      # 5. Sign the add-on using Mozilla's servers.
      #    It uses the API keys stored as GitHub secrets.
      #    The --channel listed flag is for public releases on ATN.
      - name: Sign add-on
        run: >
          web-ext sign
          --api-key ${{ secrets.ATN_JWT_ISSUER }}
          --api-secret ${{ secrets.ATN_JWT_SECRET }}
          --amo-base-url https://addons.thunderbird.net
          --source-dir=build-artifacts
          --artifacts-dir=signed-artifacts
          --channel listed

      # 6. Create a GitHub Release and attach the signed .xpi file.
      #    This makes it easy to download the final, installable file.
      - name: Create GitHub Release and attach XPI
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          files: signed-artifacts/*.xpi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}